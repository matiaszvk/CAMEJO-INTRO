Para iniciciar un proyecto para el BACKEND con js (con nodejs)

1)
npm init -y
2)
npm install express --save

---------------------------------------------------------------------------------------
Para iniciciar un proyecto en GIT
1)
git init
2) agregar un gitignore 
hace que estos archvios puestos en gitignoee no se suban al repo de git
3)git status
4)git add . 
5)git commit -m "comit inicial"
----------------------------------------------------------------------------------------

3)crear el js 
El   "main": "src/app.js", Puede tener cualqueir ubicacion y nombre

4) correr en el puerto con
node app.js

4)! configurar en el package.json para iniciar con npm start

5!) ojo:  esto es una dependencia solo para desarrolar, no hace falta subirlo a produccion

5)npm install --save-dev nodemon
"Para no tener que estar actualizando a mano"
en este caso     "dev": "src/app.js", creamos ese script por convencion

7)npm run dev 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CONECTAR CON UNA BASE DE DATOS

1) crear el yml
2)levantar la img
docker compose up -d
3)  ./psql_data: sirve para tener el direcotrio de manera local
4)acceder al contenedor
docker exec -it database /bin/bash
5)acceder  a postgressql
psql -U intro -d dragonball
psql -U batman -d arkham_asylum 




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        CONECTAR LA BASE DE DATOS CON EL BACKEND HECHO EN NODE EXPRESS

Para ellos usamos la libreria PRISMA,esta tiene PRISMA ORM

ORM(object-relational mapping): una libreria que nos permite tratar 
a nuestras tablas como si fueran objetos.
Sirve para abstraernos de la base de datos y no tocar mucho sql
PRISMA: MAPEA LAS TABLAS A OBJETOS DE JS

1) instalar prisma 
npm install prisma --save-dev
2) iniciar 
npx prisma init
3)seguir los pasos:
A) ver el .venv 
B) ver el archivo prisma ...
4).env debe ir oculto
5)debe haber un example. para que el usuario tenga un modelo para guiarse
a la hora de llenar el .env o en el README
6)laburar y crear modelos en el echema.prisma
*)para formatear:
npx prisma format 
*)ver documentacion de prisma
https://www.prisma.io/
7)pasar los cambios realizados en eschema.prisma a sql, hacer esto
se le dice hacer una migracion
npx prisma migrate dev --name "nombre de la migracion"
esto crea un archivo llamado migration.sql, osea el modelo traducido en sql
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++





IMPORTAR PRISMA A MI APP.

-CADA VEZ QUE SE MODIFIQUE EL SCHEMA.PRISMA HAY QUE MANDAR LAS MIGRACIONES
(recordar que hay que tiene que estar iniciado con docker compose up -d)
-esto se hace con:
npx prisma migrate dev --name "nombre de la migracion"



--agregamos un personaje a la base de datos

"primero ingrresamos"
docker exec -it database /bin/bash
psql -U intro -d dragonball

"luego agregamos"
INSERT INTO "Character" (name, power, price) VALUES ('kokun', 8001, 100);

"vemos el personaje ingresado"
SELECT * FROM "Character";

"asociamos al personaje a un usuario"
INSERT INTO "UnlockedCharacters" (user_id, character_id) VALUES (7, 1);
el 7 es el usuario y el 1 es el personaje